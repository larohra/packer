// Code generated by "hcl2-schema"; DO NOT EDIT.\n

package shell

import (
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"InlineShebang":        &hcldec.AttrSpec{Name: "inline_shebang", Type: cty.String, Required: false},
		"RawPauseAfter":        &hcldec.AttrSpec{Name: "pause_after", Type: cty.String, Required: false},
		"UseEnvVarFile":        &hcldec.AttrSpec{Name: "use_env_var_file", Type: cty.Bool, Required: false},
		"RemoteFolder":         &hcldec.AttrSpec{Name: "remote_folder", Type: cty.String, Required: false},
		"RemoteFile":           &hcldec.AttrSpec{Name: "remote_file", Type: cty.String, Required: false},
		"RawStartRetryTimeout": &hcldec.AttrSpec{Name: "start_retry_timeout", Type: cty.String, Required: false},
		"SkipClean":            &hcldec.AttrSpec{Name: "skip_clean", Type: cty.Bool, Required: false},
		"ExpectDisconnect":     &hcldec.AttrSpec{Name: "expect_disconnect", Type: cty.Bool, Required: false},
	}
	for k, v := range (&Config{}).Provisioner.HCL2Spec() {
		s[k] = v
	}
	return s
}
